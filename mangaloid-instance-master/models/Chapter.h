/**
 *
 *  Chapter.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3 
{
class Manga;

class Chapter
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _manga_id;
        static const std::string _chapter_no;
        static const std::string _chapter_postfix;
        static const std::string _ordinal;
        static const std::string _pages;
        static const std::string _title;
        static const std::string _version;
        static const std::string _language_id;
        static const std::string _group_id;
        static const std::string _date_added;
        static const std::string _ipfs_link;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Chapter(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Chapter(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Chapter(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Chapter() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column manga_id  */
    ///Get the value of the column manga_id, returns the default value if the column is null
    const uint64_t &getValueOfMangaId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getMangaId() const noexcept;

    ///Set the value of the column manga_id
    void setMangaId(const uint64_t &pMangaId) noexcept;


    /**  For column chapter_no  */
    ///Get the value of the column chapter_no, returns the default value if the column is null
    const uint64_t &getValueOfChapterNo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getChapterNo() const noexcept;

    ///Set the value of the column chapter_no
    void setChapterNo(const uint64_t &pChapterNo) noexcept;


    /**  For column chapter_postfix  */
    ///Get the value of the column chapter_postfix, returns the default value if the column is null
    const std::string &getValueOfChapterPostfix() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getChapterPostfix() const noexcept;

    ///Set the value of the column chapter_postfix
    void setChapterPostfix(const std::string &pChapterPostfix) noexcept;
    void setChapterPostfix(std::string &&pChapterPostfix) noexcept;
    void setChapterPostfixToNull() noexcept;


    /**  For column ordinal  */
    ///Get the value of the column ordinal, returns the default value if the column is null
    const uint64_t &getValueOfOrdinal() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getOrdinal() const noexcept;

    ///Set the value of the column ordinal
    void setOrdinal(const uint64_t &pOrdinal) noexcept;


    /**  For column pages  */
    ///Get the value of the column pages, returns the default value if the column is null
    const uint64_t &getValueOfPages() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getPages() const noexcept;

    ///Set the value of the column pages
    void setPages(const uint64_t &pPages) noexcept;


    /**  For column title  */
    ///Get the value of the column title, returns the default value if the column is null
    const std::string &getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTitle() const noexcept;

    ///Set the value of the column title
    void setTitle(const std::string &pTitle) noexcept;
    void setTitle(std::string &&pTitle) noexcept;
    void setTitleToNull() noexcept;


    /**  For column version  */
    ///Get the value of the column version, returns the default value if the column is null
    const uint64_t &getValueOfVersion() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getVersion() const noexcept;

    ///Set the value of the column version
    void setVersion(const uint64_t &pVersion) noexcept;
    void setVersionToNull() noexcept;


    /**  For column language_id  */
    ///Get the value of the column language_id, returns the default value if the column is null
    const std::string &getValueOfLanguageId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLanguageId() const noexcept;

    ///Set the value of the column language_id
    void setLanguageId(const std::string &pLanguageId) noexcept;
    void setLanguageId(std::string &&pLanguageId) noexcept;


    /**  For column group_id  */
    ///Get the value of the column group_id, returns the default value if the column is null
    const uint64_t &getValueOfGroupId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getGroupId() const noexcept;

    ///Set the value of the column group_id
    void setGroupId(const uint64_t &pGroupId) noexcept;
    void setGroupIdToNull() noexcept;


    /**  For column date_added  */
    ///Get the value of the column date_added, returns the default value if the column is null
    const uint64_t &getValueOfDateAdded() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getDateAdded() const noexcept;

    ///Set the value of the column date_added
    void setDateAdded(const uint64_t &pDateAdded) noexcept;


    /**  For column ipfs_link  */
    ///Get the value of the column ipfs_link, returns the default value if the column is null
    const std::string &getValueOfIpfsLink() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIpfsLink() const noexcept;

    ///Set the value of the column ipfs_link
    void setIpfsLink(const std::string &pIpfsLink) noexcept;
    void setIpfsLink(std::string &&pIpfsLink) noexcept;



    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    void getManga(const DbClientPtr &clientPtr, 
                  const std::function<void(Manga)> &rcb,
                  const ExceptionCallback &ecb) const;
  private:
    friend Mapper<Chapter>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<uint64_t> mangaId_;
    std::shared_ptr<uint64_t> chapterNo_;
    std::shared_ptr<std::string> chapterPostfix_;
    std::shared_ptr<uint64_t> ordinal_;
    std::shared_ptr<uint64_t> pages_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<uint64_t> version_;
    std::shared_ptr<std::string> languageId_;
    std::shared_ptr<uint64_t> groupId_;
    std::shared_ptr<uint64_t> dateAdded_;
    std::shared_ptr<std::string> ipfsLink_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[1])
        {
            sql += "manga_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "chapter_no,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "chapter_postfix,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "ordinal,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "pages,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "title,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "version,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "language_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "group_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "date_added,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "ipfs_link,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace sqlite3
} // namespace drogon_model
