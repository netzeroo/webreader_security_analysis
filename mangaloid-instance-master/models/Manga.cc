/**
 *
 *  Manga.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Manga.h"
#include "Title.h"
#include "Chapter.h"
#include "Tag.h"
#include "MangaTag.h"
#include "Person.h"
#include "Author.h"
#include "Person.h"
#include "Artist.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string Manga::Cols::_id = "id";
const std::string Manga::Cols::_type = "type";
const std::string Manga::Cols::_country_of_origin = "country_of_origin";
const std::string Manga::Cols::_publication_status = "publication_status";
const std::string Manga::Cols::_scanlation_status = "scanlation_status";
const std::string Manga::Cols::_mal_id = "mal_id";
const std::string Manga::Cols::_anilist_id = "anilist_id";
const std::string Manga::Cols::_mangaupdates_id = "mangaupdates_id";
const std::string Manga::primaryKeyName = "id";
const bool Manga::hasPrimaryKey = true;
const std::string Manga::tableName = "manga";

const std::vector<typename Manga::MetaData> Manga::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"type","uint64_t","integer",8,0,0,1},
{"country_of_origin","std::string","string",0,0,0,1},
{"publication_status","uint64_t","integer",8,0,0,1},
{"scanlation_status","bool","bool",1,0,0,1},
{"mal_id","uint64_t","integer",8,0,0,0},
{"anilist_id","uint64_t","integer",8,0,0,0},
{"mangaupdates_id","uint64_t","integer",8,0,0,0}
};
const std::string &Manga::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Manga::Manga(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<uint64_t>(r["type"].as<uint64_t>());
        }
        if(!r["country_of_origin"].isNull())
        {
            countryOfOrigin_=std::make_shared<std::string>(r["country_of_origin"].as<std::string>());
        }
        if(!r["publication_status"].isNull())
        {
            publicationStatus_=std::make_shared<uint64_t>(r["publication_status"].as<uint64_t>());
        }
        if(!r["scanlation_status"].isNull())
        {
            scanlationStatus_=std::make_shared<bool>(r["scanlation_status"].as<bool>());
        }
        if(!r["mal_id"].isNull())
        {
            malId_=std::make_shared<uint64_t>(r["mal_id"].as<uint64_t>());
        }
        if(!r["anilist_id"].isNull())
        {
            anilistId_=std::make_shared<uint64_t>(r["anilist_id"].as<uint64_t>());
        }
        if(!r["mangaupdates_id"].isNull())
        {
            mangaupdatesId_=std::make_shared<uint64_t>(r["mangaupdates_id"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            type_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            countryOfOrigin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            publicationStatus_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            scanlationStatus_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            malId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            anilistId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            mangaupdatesId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Manga::Manga(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            countryOfOrigin_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());

        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            publicationStatus_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            scanlationStatus_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            malId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            anilistId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            mangaupdatesId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
}

Manga::Manga(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson["type"].asUInt64());
        }
    }
    if(pJson.isMember("country_of_origin"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["country_of_origin"].isNull())
        {
            countryOfOrigin_=std::make_shared<std::string>(pJson["country_of_origin"].asString());
        }
    }
    if(pJson.isMember("publication_status"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["publication_status"].isNull())
        {
            publicationStatus_=std::make_shared<uint64_t>((uint64_t)pJson["publication_status"].asUInt64());
        }
    }
    if(pJson.isMember("scanlation_status"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["scanlation_status"].isNull())
        {
            scanlationStatus_=std::make_shared<bool>(pJson["scanlation_status"].asBool());
        }
    }
    if(pJson.isMember("mal_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["mal_id"].isNull())
        {
            malId_=std::make_shared<uint64_t>((uint64_t)pJson["mal_id"].asUInt64());
        }
    }
    if(pJson.isMember("anilist_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["anilist_id"].isNull())
        {
            anilistId_=std::make_shared<uint64_t>((uint64_t)pJson["anilist_id"].asUInt64());
        }
    }
    if(pJson.isMember("mangaupdates_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["mangaupdates_id"].isNull())
        {
            mangaupdatesId_=std::make_shared<uint64_t>((uint64_t)pJson["mangaupdates_id"].asUInt64());
        }
    }
}

void Manga::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            countryOfOrigin_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            publicationStatus_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            scanlationStatus_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            malId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            anilistId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            mangaupdatesId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
}
                                                                    
void Manga::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson["type"].asUInt64());
        }
    }
    if(pJson.isMember("country_of_origin"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["country_of_origin"].isNull())
        {
            countryOfOrigin_=std::make_shared<std::string>(pJson["country_of_origin"].asString());
        }
    }
    if(pJson.isMember("publication_status"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["publication_status"].isNull())
        {
            publicationStatus_=std::make_shared<uint64_t>((uint64_t)pJson["publication_status"].asUInt64());
        }
    }
    if(pJson.isMember("scanlation_status"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["scanlation_status"].isNull())
        {
            scanlationStatus_=std::make_shared<bool>(pJson["scanlation_status"].asBool());
        }
    }
    if(pJson.isMember("mal_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["mal_id"].isNull())
        {
            malId_=std::make_shared<uint64_t>((uint64_t)pJson["mal_id"].asUInt64());
        }
    }
    if(pJson.isMember("anilist_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["anilist_id"].isNull())
        {
            anilistId_=std::make_shared<uint64_t>((uint64_t)pJson["anilist_id"].asUInt64());
        }
    }
    if(pJson.isMember("mangaupdates_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["mangaupdates_id"].isNull())
        {
            mangaupdatesId_=std::make_shared<uint64_t>((uint64_t)pJson["mangaupdates_id"].asUInt64());
        }
    }
}

const uint64_t &Manga::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getId() const noexcept
{
    return id_;
}
void Manga::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Manga::PrimaryKeyType & Manga::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Manga::getValueOfType() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getType() const noexcept
{
    return type_;
}
void Manga::setType(const uint64_t &pType) noexcept
{
    type_ = std::make_shared<uint64_t>(pType);
    dirtyFlag_[1] = true;
}




const std::string &Manga::getValueOfCountryOfOrigin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(countryOfOrigin_)
        return *countryOfOrigin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Manga::getCountryOfOrigin() const noexcept
{
    return countryOfOrigin_;
}
void Manga::setCountryOfOrigin(const std::string &pCountryOfOrigin) noexcept
{
    countryOfOrigin_ = std::make_shared<std::string>(pCountryOfOrigin);
    dirtyFlag_[2] = true;
}
void Manga::setCountryOfOrigin(std::string &&pCountryOfOrigin) noexcept
{
    countryOfOrigin_ = std::make_shared<std::string>(std::move(pCountryOfOrigin));
    dirtyFlag_[2] = true;
}




const uint64_t &Manga::getValueOfPublicationStatus() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(publicationStatus_)
        return *publicationStatus_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getPublicationStatus() const noexcept
{
    return publicationStatus_;
}
void Manga::setPublicationStatus(const uint64_t &pPublicationStatus) noexcept
{
    publicationStatus_ = std::make_shared<uint64_t>(pPublicationStatus);
    dirtyFlag_[3] = true;
}




const bool &Manga::getValueOfScanlationStatus() const noexcept
{
    const static bool defaultValue = bool();
    if(scanlationStatus_)
        return *scanlationStatus_;
    return defaultValue;
}
const std::shared_ptr<bool> &Manga::getScanlationStatus() const noexcept
{
    return scanlationStatus_;
}
void Manga::setScanlationStatus(const bool &pScanlationStatus) noexcept
{
    scanlationStatus_ = std::make_shared<bool>(pScanlationStatus);
    dirtyFlag_[4] = true;
}




const uint64_t &Manga::getValueOfMalId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(malId_)
        return *malId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getMalId() const noexcept
{
    return malId_;
}
void Manga::setMalId(const uint64_t &pMalId) noexcept
{
    malId_ = std::make_shared<uint64_t>(pMalId);
    dirtyFlag_[5] = true;
}


void Manga::setMalIdToNull() noexcept
{
    malId_.reset();
    dirtyFlag_[5] = true;
}


const uint64_t &Manga::getValueOfAnilistId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(anilistId_)
        return *anilistId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getAnilistId() const noexcept
{
    return anilistId_;
}
void Manga::setAnilistId(const uint64_t &pAnilistId) noexcept
{
    anilistId_ = std::make_shared<uint64_t>(pAnilistId);
    dirtyFlag_[6] = true;
}


void Manga::setAnilistIdToNull() noexcept
{
    anilistId_.reset();
    dirtyFlag_[6] = true;
}


const uint64_t &Manga::getValueOfMangaupdatesId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(mangaupdatesId_)
        return *mangaupdatesId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getMangaupdatesId() const noexcept
{
    return mangaupdatesId_;
}
void Manga::setMangaupdatesId(const uint64_t &pMangaupdatesId) noexcept
{
    mangaupdatesId_ = std::make_shared<uint64_t>(pMangaupdatesId);
    dirtyFlag_[7] = true;
}


void Manga::setMangaupdatesIdToNull() noexcept
{
    mangaupdatesId_.reset();
    dirtyFlag_[7] = true;
}


void Manga::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Manga::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "type",
        "country_of_origin",
        "publication_status",
        "scanlation_status",
        "mal_id",
        "anilist_id",
        "mangaupdates_id"
    };
    return inCols;
}

void Manga::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCountryOfOrigin())
        {
            binder << getValueOfCountryOfOrigin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPublicationStatus())
        {
            binder << getValueOfPublicationStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getScanlationStatus())
        {
            binder << getValueOfScanlationStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMalId())
        {
            binder << getValueOfMalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAnilistId())
        {
            binder << getValueOfAnilistId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMangaupdatesId())
        {
            binder << getValueOfMangaupdatesId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Manga::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Manga::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCountryOfOrigin())
        {
            binder << getValueOfCountryOfOrigin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPublicationStatus())
        {
            binder << getValueOfPublicationStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getScanlationStatus())
        {
            binder << getValueOfScanlationStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMalId())
        {
            binder << getValueOfMalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAnilistId())
        {
            binder << getValueOfAnilistId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMangaupdatesId())
        {
            binder << getValueOfMangaupdatesId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Manga::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=(Json::UInt64)getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getCountryOfOrigin())
    {
        ret["country_of_origin"]=getValueOfCountryOfOrigin();
    }
    else
    {
        ret["country_of_origin"]=Json::Value();
    }
    if(getPublicationStatus())
    {
        ret["publication_status"]=(Json::UInt64)getValueOfPublicationStatus();
    }
    else
    {
        ret["publication_status"]=Json::Value();
    }
    if(getScanlationStatus())
    {
        ret["scanlation_status"]=getValueOfScanlationStatus();
    }
    else
    {
        ret["scanlation_status"]=Json::Value();
    }
    if(getMalId())
    {
        ret["mal_id"]=(Json::UInt64)getValueOfMalId();
    }
    else
    {
        ret["mal_id"]=Json::Value();
    }
    if(getAnilistId())
    {
        ret["anilist_id"]=(Json::UInt64)getValueOfAnilistId();
    }
    else
    {
        ret["anilist_id"]=Json::Value();
    }
    if(getMangaupdatesId())
    {
        ret["mangaupdates_id"]=(Json::UInt64)getValueOfMangaupdatesId();
    }
    else
    {
        ret["mangaupdates_id"]=Json::Value();
    }
    return ret;
}

Json::Value Manga::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCountryOfOrigin())
            {
                ret[pMasqueradingVector[2]]=getValueOfCountryOfOrigin();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPublicationStatus())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfPublicationStatus();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getScanlationStatus())
            {
                ret[pMasqueradingVector[4]]=getValueOfScanlationStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMalId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfMalId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAnilistId())
            {
                ret[pMasqueradingVector[6]]=(Json::UInt64)getValueOfAnilistId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getMangaupdatesId())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfMangaupdatesId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=(Json::UInt64)getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getCountryOfOrigin())
    {
        ret["country_of_origin"]=getValueOfCountryOfOrigin();
    }
    else
    {
        ret["country_of_origin"]=Json::Value();
    }
    if(getPublicationStatus())
    {
        ret["publication_status"]=(Json::UInt64)getValueOfPublicationStatus();
    }
    else
    {
        ret["publication_status"]=Json::Value();
    }
    if(getScanlationStatus())
    {
        ret["scanlation_status"]=getValueOfScanlationStatus();
    }
    else
    {
        ret["scanlation_status"]=Json::Value();
    }
    if(getMalId())
    {
        ret["mal_id"]=(Json::UInt64)getValueOfMalId();
    }
    else
    {
        ret["mal_id"]=Json::Value();
    }
    if(getAnilistId())
    {
        ret["anilist_id"]=(Json::UInt64)getValueOfAnilistId();
    }
    else
    {
        ret["anilist_id"]=Json::Value();
    }
    if(getMangaupdatesId())
    {
        ret["mangaupdates_id"]=(Json::UInt64)getValueOfMangaupdatesId();
    }
    else
    {
        ret["mangaupdates_id"]=Json::Value();
    }
    return ret;
}

bool Manga::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("country_of_origin"))
    {
        if(!validJsonOfField(2, "country_of_origin", pJson["country_of_origin"], err, true))
            return false;
    }
    else
    {
        err="The country_of_origin column cannot be null";
        return false;
    }
    if(pJson.isMember("publication_status"))
    {
        if(!validJsonOfField(3, "publication_status", pJson["publication_status"], err, true))
            return false;
    }
    else
    {
        err="The publication_status column cannot be null";
        return false;
    }
    if(pJson.isMember("scanlation_status"))
    {
        if(!validJsonOfField(4, "scanlation_status", pJson["scanlation_status"], err, true))
            return false;
    }
    else
    {
        err="The scanlation_status column cannot be null";
        return false;
    }
    if(pJson.isMember("mal_id"))
    {
        if(!validJsonOfField(5, "mal_id", pJson["mal_id"], err, true))
            return false;
    }
    if(pJson.isMember("anilist_id"))
    {
        if(!validJsonOfField(6, "anilist_id", pJson["anilist_id"], err, true))
            return false;
    }
    if(pJson.isMember("mangaupdates_id"))
    {
        if(!validJsonOfField(7, "mangaupdates_id", pJson["mangaupdates_id"], err, true))
            return false;
    }
    return true;
}
bool Manga::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Manga::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("country_of_origin"))
    {
        if(!validJsonOfField(2, "country_of_origin", pJson["country_of_origin"], err, false))
            return false;
    }
    if(pJson.isMember("publication_status"))
    {
        if(!validJsonOfField(3, "publication_status", pJson["publication_status"], err, false))
            return false;
    }
    if(pJson.isMember("scanlation_status"))
    {
        if(!validJsonOfField(4, "scanlation_status", pJson["scanlation_status"], err, false))
            return false;
    }
    if(pJson.isMember("mal_id"))
    {
        if(!validJsonOfField(5, "mal_id", pJson["mal_id"], err, false))
            return false;
    }
    if(pJson.isMember("anilist_id"))
    {
        if(!validJsonOfField(6, "anilist_id", pJson["anilist_id"], err, false))
            return false;
    }
    if(pJson.isMember("mangaupdates_id"))
    {
        if(!validJsonOfField(7, "mangaupdates_id", pJson["mangaupdates_id"], err, false))
            return false;
    }
    return true;
}
bool Manga::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Manga::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson, 
                             std::string &err, 
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
void Manga::getTitle(const DbClientPtr &clientPtr, 
                     const std::function<void(std::vector<Title>)> &rcb,
                     const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from title where manga_id = ?";
    *clientPtr << sql
               << *id_ 
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Title> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Title(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
void Manga::getChapter(const DbClientPtr &clientPtr, 
                       const std::function<void(std::vector<Chapter>)> &rcb,
                       const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from chapter where manga_id = ?";
    *clientPtr << sql
               << *id_ 
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Chapter> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Chapter(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
void Manga::getTag(const DbClientPtr &clientPtr, 
                   const std::function<void(std::vector<std::pair<Tag,MangaTag>>)> &rcb,
                   const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from tag,manga_tag where manga_tag.manga_id = ? and manga_tag.tag_id = tag.id";
    *clientPtr << sql
               << *id_ 
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<std::pair<Tag,MangaTag>> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(std::pair<Tag,MangaTag>(
                           Tag(row),MangaTag(row,Tag::getColumnNumber())));
                   }
                   rcb(ret);
               }
               >> ecb;
}
void Manga::getPerson(const DbClientPtr &clientPtr, 
                      const std::function<void(std::vector<std::pair<Person,Author>>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from person,author where author.manga_id = ? and author.person_id = person.id";
    *clientPtr << sql
               << *id_ 
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<std::pair<Person,Author>> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(std::pair<Person,Author>(
                           Person(row),Author(row,Person::getColumnNumber())));
                   }
                   rcb(ret);
               }
               >> ecb;
}
void Manga::getPerson(const DbClientPtr &clientPtr, 
                      const std::function<void(std::vector<std::pair<Person,Artist>>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from person,artist where artist.manga_id = ? and artist.person_id = person.id";
    *clientPtr << sql
               << *id_ 
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<std::pair<Person,Artist>> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(std::pair<Person,Artist>(
                           Person(row),Artist(row,Person::getColumnNumber())));
                   }
                   rcb(ret);
               }
               >> ecb;
}
